"""
Find where a human's hand is using computer vision.

Using cv_bridge, take messages from the /image_raw topic and convert them
into OpenCV images for mediapipe to use to figure out where a user's hand
is located. Afterwards, figure out the 3D locations of the hand's joints
generated by mediapipe using the depth_image_proc package.

SUBSCRIBERS:
  + /image_raw (Image) - Raw image data from the usb camera.

"""

import rclpy
from rclpy.node import Node
from rclpy.callback_groups import MutuallyExclusiveCallbackGroup

from sensor_msgs.msg import Image
from visualization_msgs.msg import Marker

from cv_bridge import CvBridge, CvBridgeError
from .mediapipehelper import MediaPipeRos as mps
from .realsensehelper import RealSenseRos as rsr

import mediapipe as mp
import numpy as np
import cv2 as cv


class HandCV(Node):
    def __init__(self):
        super().__init__("HandCV")

        # initialize CvBridge object
        self.bridge = CvBridge()

        # initialize MediaPipe Object
        self.mps = mps()
        self.landmarker = self.mps.initialize_mediapipe()

        # create callback groups
        self.timer_callback_group = MutuallyExclusiveCallbackGroup()

        # create timer
        self.timer = self.create_timer(1/30, self.timer_callback, callback_group=self.timer_callback_group)

        # create subscribers
        self.color_image_raw_sub = self.create_subscription(
            Image, '/camera/color/image_raw', self.color_image_raw_callback, 10)
        
        self.depth_image_raw_sub = self.create_subscription(
            Image, '/camera/depth/image_rect_raw', self.depth_image_raw_callback, 10)

        # create publishers
        self.cv_image_pub = self.create_publisher(Image, 'cv_image', 10) 
        self.marker_pub = self.create_publisher(Marker, 'visualization_marker', 10)

    def depth_image_raw_callback(self, msg):
        depth_image = msg

    def color_image_raw_callback(self, msg):
        """Capture messages published on the /image_raw topic, and convert them to OpenCV images."""
        try:
            tmp_image = self.bridge.imgmsg_to_cv2(
                msg, desired_encoding="rgb8")

            mp_image = mp.Image(
                image_format=mp.ImageFormat.SRGB, data=tmp_image)

            detection_result = self.landmarker.detect(mp_image)
            self.get_logger().info(f"{detection_result}")
            annotated_image = self.mps.draw_landmarks_on_image(
                rgb_image=tmp_image, detection_result=detection_result)

            cv_image = self.bridge.cv2_to_imgmsg(
                annotated_image, encoding="rgb8")

            self.cv_image_pub.publish(cv_image)

        except CvBridgeError:
            self.get_logger().error(CvBridgeError)

    def timer_callback():
        pass


def main(args=None):
    rclpy.init(args=args)

    handcv = HandCV()

    rclpy.spin(handcv)


if __name__ == '__main__':
    main()
