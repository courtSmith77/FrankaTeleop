"""
Find where a human's hand is using computer vision.

Using cv_bridge, take messages from the /image_raw topic and convert them
into OpenCV images for mediapipe to use to figure out where a user's hand
is located. Afterwards, figure out the 3D locations of the hand's joints
generated by mediapipe using the depth_image_proc package.

SUBSCRIBERS:
  + /image_raw (Image) - Raw image data from the usb camera.

"""

import rclpy
from rclpy.node import Node
from rclpy.callback_groups import MutuallyExclusiveCallbackGroup
from sensor_msgs.msg import Image

from cv_bridge import CvBridge, CvBridgeError
from .mediapipehelper import MediaPipeRos as mps
from .realsensehelper import RealSenseRos as rsr

import mediapipe as mp
import numpy as np
import cv2 as cv


class HandCV(Node):
    def __init__(self):
        super().__init__("HandCV")

        # initialize CvBridge object
        self.bridge = CvBridge()

        # initialize MediaPipe Object
        self.mps = mps()
        self.landmarker = self.mps.initialize_mediapipe()
        
        # create callback groups
        self.timer_callback_group = MutuallyExclusiveCallbackGroup()

        # create subscribers
        self.image_raw_sub = self.create_subscription(
            Image, 'image_raw', self.image_raw_callback, 10)

        # create publishers
        self.cv_image_pub = self.create_publisher(Image, 'cv_image', 10)

        # create timer
        self.create_timer(1, self.timer_callback, self.timer_callback_group)

        self.rs = rsr()
        self.rs.initialize_rs()

    def create_real_sense_frames(self):
        frames = self.rs.pipeline.wait_for_frames
        aligned_frames = self.rs.align.process(frames)

        #aligned_depth_frame is a 640x480 depth image
        aligned_color_frame = aligned_frames.get_color_frame()
        aligned_depth_frame = aligned_frames.get_depth_frame()
        aligned_depth_frame = self.rs.decimation_filter.process(aligned_depth_frame)
        aligned_depth_frame = self.rs.spatial_filter.process(aligned_depth_frame)
        aligned_depth_frame = self.rs.temporal_filter.process(aligned_depth_frame)
        aligned_depth_frame = self.rs.hole.process(aligned_depth_frame)
        aligned_depth_frame = self.rs.threshold_filter.process(aligned_depth_frame)

        color_image = np.asanyarray(aligned_color_frame.get_data())
        depth_image = np.asanyarray(aligned_depth_frame.get_data())
        depth_image = cv.resize(depth_image, (self.rs.w, self.rs.h), interpolation=cv.INTER_AREA)\
        
        mp_image = mp.Image(image_format=mp.ImageFormat.SRGB, data=color_image)
        detection_result = self.landmarker.detect(mp_image)
        annotated_image = self.mps.draw_landmarks_on_image(
            rgb_image=color_image, detection_result=detection_result)
        
        self.get_logger().info(f"detection_result: {detection_result}")
        

        

    def image_raw_callback(self, msg):
        """Capture messages published on the /image_raw topic, and convert them to OpenCV images."""
        try:
            self.get_logger().info("got here2")
            tmp_image = self.bridge.imgmsg_to_cv2(
                msg, desired_encoding="rgb8")
            self.get_logger().info(
                f"cv2img type: {type(tmp_image)}, \n cv2img: {tmp_image.shape}")

            mp_image = mp.Image(
                image_format=mp.ImageFormat.SRGB, data=tmp_image)

            self.get_logger().info(
                f"mp_image type: {type(mp_image)}, \n mp_image shape: {np.asarray(mp_image).shape}")

            detection_result = self.landmarker.detect(mp_image)
            annotated_image = self.mps.draw_landmarks_on_image(
                rgb_image=tmp_image, detection_result=detection_result)

            cv_image = self.bridge.cv2_to_imgmsg(
                annotated_image, encoding="rgb8")

            self.cv_image_pub.publish(cv_image)

        except CvBridgeError as e:
            self.get_logger().info("got here error")
            self.get_logger().error(e)

    def timer_callback(self):
        self.create_real_sense_frames()


def main(args=None):
    rclpy.init(args=args)

    handcv = HandCV()

    rclpy.spin(handcv)


if __name__ == '__main__':
    main()
