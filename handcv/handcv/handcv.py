"""
Find where a human's hand is using computer vision.

Using cv_bridge, take messages from the /image_raw topic and convert them
into OpenCV images for mediapipe to use to figure out where a user's hand
is located. Afterwards, figure out the 3D locations of the hand's joints
generated by mediapipe using the depth_image_proc package.

SUBSCRIBERS:
  + /image_raw (Image) - Raw image data from the usb camera.

"""

from rclpy import Node
from rclpy.callback_groups import MutuallyExclusiveCallbackGroup
from sensor_msgs.msg import Image

from cv_bridge import CvBridge, CvBridgeError
from mediapipelib import MediaPipeRos as mps

import mediapipe as mp


class HandCV(Node):
    def __init__(self):
        super.__init__("handcv")

        # initialize CvBridge object
        self.bridge = CvBridge()
        self.mps = mps()
        # create callback groups
        self.timer_callback_group = MutuallyExclusiveCallbackGroup()

        # create subscribers
        self.image_raw_sub = self.create_subscription(
            Image, 'image_raw', self.image_raw_callback, 10)

        # create publishers
        self.cv_image_pub = self.create_publisher(Image, 'cv_image', 10)

        # create timer
        self.create_timer(0.01, self.timer_callback, self.timer_callback_group)

        self.landmarker = mps.initialize_mediapipe()

    def image_raw_callback(self, msg):
        """Capture messages published on the /image_raw topic, and convert them to OpenCV images."""
        try:
            tmp_image = self.bridge.imgmsg_to_cv2(
                msg, desired_encoding="passthrough")
            self.mp_image = mp.Image(
                image_format=mp.ImageFormat.SRGB, data=tmp_image)

            detection_result = self.landmarker.detect_async(self.mp_image)
            annotated_image = mps.draw_landmarks_on_image(
                rgb_image=self.mp_image, detection_result=detection_result)

            cv_image = self.bridge.cv2_to_imgmsg(
                annotated_image, desired_encoding="passthrough")

            self.cv_image_pub.publish(cv_image)

        except CvBridgeError as e:
            self.get_logger().error(e)
